
# Define the local version of your script
local_version = "1.8.1"

# Retrieve the remote version from GitHub
url = "https://raw.githubusercontent.com/CashOutMotivated1337/DiamondSorter/main/version.txt?token=GHSAT0AAAAAACLMYTSEMVHSBDIPTG55YKCGZNRUOKQ"
response = requests.get(url)
remote_version = response.text.strip()

# Compare the local and remote versions
if local_version != remote_version:
    print("A new version ({}) is available. Please update your script.".format(remote_version))
else:
    print("You are using the latest version ({}) of the script.".format(local_version))

def clear():
    if platform.system() == 'Windows':
        os.system('cls & title Python Example')  # clear console, change title
    elif platform.system() == 'Linux':
        os.system('clear')  # clear console
        sys.stdout.write("\x1b]0;Python Example\x07")  # change title
    elif platform.system() == 'Darwin':
        os.system("clear && printf '\e[3J'")  # clear console
        os.system('''echo - n - e "\033]0;Python Example\007"''')  # change title

print("Initializing")

def getchecksum():
    md5_hash = hashlib.md5()
    file = open(''.join(sys.argv), "rb")
    md5_hash.update(file.read())
    digest = md5_hash.hexdigest()
    return digest

def get_current_working_dir():
    if getattr(sys, 'frozen', False):
        application_path = os.path.dirname(sys.executable)
    else:
        application_path = os.path.dirname(__file__)
    return application_path
    
keyauthapp = api(
    name = "DiamondSorter",
    ownerid = "VwOq0EhmEw",
    secret = "795e63c4dd27cbb04b9af01befb8eae95625e51115356cbbd767196900409066",
    version = "1.0",
    hash_to_check = getchecksum()
)
import time
import curses

def animate_banner(stdscr):
    # Hide the cursor
    curses.curs_set(0)
    print("You are using the latest version ({}) of the script.".format(local_version))

    # Create the banner string
    banner = '''=====================================================
 ▄▄▄▄▄▄  ▄▄▄ ▄▄▄▄▄▄ ▄▄   ▄▄ ▄▄▄▄▄▄▄ ▄▄    ▄ ▄▄▄▄▄▄   
█      ██   █      █  █▄█  █       █  █  █ █      █  
█  ▄    █   █  ▄   █       █   ▄   █   █▄█ █  ▄    █ 
█ █ █   █   █ █▄█  █       █  █ █  █       █ █ █   █ 
█ █▄█   █   █      █       █  █▄█  █  ▄    █ █▄█   █ 
█       █   █  ▄   █ ██▄██ █       █ █ █   █       █ 
█▄▄▄▄▄▄██▄▄▄█▄█ █▄▄█▄█   █▄█▄▄▄▄▄▄▄█▄█  █▄▄█▄▄▄▄▄▄█  
  .     '     ,               The Perfect Stealer
    _________        Log File Sorter & Combolist Manager
 _ /_|_____|_\ _                 - 2024 -
   '. \   / .'                 Version: {}
     '.\ /.'                   @DiamondSorter
       '.'   
 ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄   ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄   
 █       █       █   ▄  █ █       █       █   ▄  █  
 █  ▄▄▄▄▄█   ▄   █  █ █ █ █▄     ▄█    ▄▄▄█  █ █ █  
 █ █▄▄▄▄▄█  █ █  █   █▄▄█▄  █   █ █   █▄▄▄█   █▄▄█▄ 
 █▄▄▄▄▄  █  █▄█  █    ▄▄  █ █   █ █    ▄▄▄█    ▄▄  █
  ▄▄▄▄▄█ █       █   █  █ █ █   █ █   █▄▄▄█   █  █ █
 █▄▄▄▄▄▄▄█▄▄▄▄▄▄▄█▄▄▄█  █▄█ █▄▄▄█ █▄▄▄▄▄▄▄█▄▄▄█  █▄█

========================================================'''
    banner = banner.format(local_version)

    # Get the dimensions of the terminal
    height, width = stdscr.getmaxyx()

    # Calculate the center position for the banner
    x = width // 2 - len(banner.splitlines()[0]) // 2
    y = height // 2 - len(banner.splitlines()) // 2

    # Loop to animate the banner
    for i, line in enumerate(banner.splitlines()):
        stdscr.addstr(y + i, x, line)
        stdscr.refresh()
        time.sleep(0.2)


    # Wait for a key press before exiting
    stdscr.getch()

# Run the animation
curses.wrapper(animate_banner)

def answer():
    try:
        print("""1.Login
2.Register
3.Upgrade
4.License Key Only
        """)
        ans = input("Select Option: ")
        if ans == "1":
            user = input('Provide username: ')
            password = input('Provide password: ')
            keyauthapp.login(user, password)
        elif ans == "2":
            user = input('Provide username: ')
            password = input('Provide password: ')
            license = input('Provide License: ')
            keyauthapp.register(user, password, license)
        elif ans == "3":
            user = input('Provide username: ')
            license = input('Provide License: ')
            keyauthapp.upgrade(user, license)
        elif ans == "4":
            key = input('Enter your license: ')
            keyauthapp.license(key)
        else:
            print("\nInvalid option")
            sleep(1)
            clear()
            answer()
    except KeyboardInterrupt:
        os._exit(1)

answer()

'''try:
    if os.path.isfile('auth.json'): #Checking if the auth file exist
        if jsond.load(open("auth.json"))["authusername"] == "": #Checks if the authusername is empty or not
            print("""
1. Login
2. Register
            """)
            ans=input("Select Option: ")  #Skipping auto-login bc auth file is empty
            if ans=="1": 
                user = input('Provide username: ')
                password = input('Provide password: ')
                keyauthapp.login(user,password)
                authfile = jsond.load(open("auth.json"))
                authfile["authusername"] = user
                authfile["authpassword"] = password
                jsond.dump(authfile, open('auth.json', 'w'), sort_keys=False, indent=4)
            elif ans=="2":
                user = input('Provide username: ')
                password = input('Provide password: ')
                license = input('Provide License: ')
                keyauthapp.register(user,password,license) 
                authfile = jsond.load(open("auth.json"))
                authfile["authusername"] = user
                authfile["authpassword"] = password
                jsond.dump(authfile, open('auth.json', 'w'), sort_keys=False, indent=4)
            else:
                print("\nNot Valid Option") 
                os._exit(1) 
        else:
            try: #2. Auto login
                with open('auth.json', 'r') as f:
                    authfile = jsond.load(f)
                    authuser = authfile.get('authusername')
                    authpass = authfile.get('authpassword')
                    keyauthapp.login(authuser,authpass)
            except Exception as e: #Error stuff
                print(e)
    else: #Creating auth file bc its missing
        try:
            f = open("auth.json", "a") #Writing content
            f.write("""{
    "authusername": "",
    "authpassword": ""
}""")
            f.close()
            print ("""
1. Login
2. Register
            """)#Again skipping auto-login bc the file is empty/missing
            ans=input("Select Option: ") 
            if ans=="1": 
                user = input('Provide username: ')
                password = input('Provide password: ')
                keyauthapp.login(user,password)
                authfile = jsond.load(open("auth.json"))
                authfile["authusername"] = user
                authfile["authpassword"] = password
                jsond.dump(authfile, open('auth.json', 'w'), sort_keys=False, indent=4)
            elif ans=="2":
                user = input('Provide username: ')
                password = input('Provide password: ')
                license = input('Provide License: ')
                keyauthapp.register(user,password,license)
                authfile = jsond.load(open("auth.json"))
                authfile["authusername"] = user
                authfile["authpassword"] = password
                jsond.dump(authfile, open('auth.json', 'w'), sort_keys=False, indent=4)
            else:
                print("\nNot Valid Option") 
                os._exit(1) 
        except Exception as e: #Error stuff
            print(e)
            os._exit(1) 
except Exception as e: #Error stuff
    print(e)
    os._exit(1)'''

print("\nUser data: ")
print("Username: " + keyauthapp.user_data.username)
print("IP address: " + keyauthapp.user_data.ip)
print("Hardware-Id: " + keyauthapp.user_data.hwid)

subs = keyauthapp.user_data.subscriptions  # Get all Subscription names, expiry, and timeleft
for i in range(len(subs)):
    sub = subs[i]["subscription"]  # Subscription from every Sub
    expiry = datetime.utcfromtimestamp(int(subs[i]["expiry"])).strftime(
        '%Y-%m-%d %H:%M:%S')  # Expiry date from every Sub
    timeleft = subs[i]["timeleft"]  # Timeleft from every Sub

    print(f"[{i + 1} / {len(subs)}] | Subscription: {sub} - Expiry: {expiry} - Timeleft: {timeleft}")

print("Created at: " + datetime.utcfromtimestamp(int(keyauthapp.user_data.createdate)).strftime('%Y-%m-%d %H:%M:%S'))
print("Last login at: " + datetime.utcfromtimestamp(int(keyauthapp.user_data.lastlogin)).strftime('%Y-%m-%d %H:%M:%S'))
print("Expires at: " + datetime.utcfromtimestamp(int(keyauthapp.user_data.expires)).strftime('%Y-%m-%d %H:%M:%S'))
print("\Launching Diamond Sorter in five seconds..")
sleep(5)
