# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'logs_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sqlite3
from PyQt5 import QtCore, QtGui, QtWidgets
import requests
from bs4 import BeautifulSoup
from urllib.parse import urlparse

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1040, 653)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tab_widget = QtWidgets.QWidget(self.centralwidget)
        self.tab_widget.setGeometry(QtCore.QRect(9, 9, 1001, 141))
        self.tab_widget.setStyleSheet("QLineEdit,\n"
"QComboBox,\n"
"QDateTimeEdit,\n"
"QSpinBox,\n"
"QDoubleSpinBox {\n"
"  color: #1de9b6;\n"
"  background-color: #31363b;\n"
"  border: 2px solid #1de9b6;\n"
"  border-radius: 4px;\n"
"  height: 32px;\n"
"}\n"
"\n"
"QWidget {\n"
"  background-color: #232629;\n"
"  color: #ffffff;\n"
"}\n"
"\n"
"QGroupBox,\n"
"QFrame {\n"
"  background-color: #232629;\n"
"  border: 2px solid #4f5b62;\n"
"  border-radius: 4px;\n"
"}\n"
"\n"
"QRadioButton::indicator,\n"
"QCheckBox::indicator {\n"
"  width: 16px;\n"
"  height: 16px;\n"
"  border: 2px solid #1de9b6;\n"
"  border-radius: 0;\n"
"  transform: rotate(45deg);\n"
"  transform-origin: center;\n"
"}\n"
"\n"
"QRadioButton::indicator:checked,\n"
"QCheckBox::indicator:checked {\n"
"  background-color: #1de9b6;\n"
"  border-color: #1de9b6;\n"
"}\n"
"\n"
"QRadioButton::indicator:hover,\n"
"QCheckBox::indicator:hover {\n"
"  border-color: rgba(29, 233, 182, 0.8);\n"
"}\n"
"\n"
"QRadioButton::indicator:checked:hover,\n"
"QCheckBox::indicator:checked:hover {\n"
"  border-color: #1de9b6;\n"
"}")
        self.tab_widget.setObjectName("tab_widget")
        self.main_data_widget = QtWidgets.QTabWidget(self.tab_widget)
        self.main_data_widget.setGeometry(QtCore.QRect(9, 9, 991, 131))
        self.main_data_widget.setStyleSheet("")
        self.main_data_widget.setObjectName("main_data_widget")
        self.data_tab_widget_1 = QtWidgets.QWidget()
        self.data_tab_widget_1.setObjectName("data_tab_widget_1")
        self.grab_data_button = QtWidgets.QPushButton(self.data_tab_widget_1)
        self.grab_data_button.setGeometry(QtCore.QRect(650, 10, 91, 24))
        self.grab_data_button.setObjectName("grab_data_button")
        self.toolButton = QtWidgets.QToolButton(self.data_tab_widget_1)
        self.toolButton.setGeometry(QtCore.QRect(950, 70, 23, 23))
        self.toolButton.setObjectName("toolButton")
        self.frame_stats_1 = QtWidgets.QFrame(self.data_tab_widget_1)
        self.frame_stats_1.setGeometry(QtCore.QRect(20, 10, 201, 80))
        self.frame_stats_1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_stats_1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_stats_1.setObjectName("frame_stats_1")
        self.textBrowser = QtWidgets.QTextBrowser(self.frame_stats_1)
        self.textBrowser.setGeometry(QtCore.QRect(0, 0, 201, 81))
        self.textBrowser.setSearchPaths([])
        self.textBrowser.setObjectName("textBrowser")
        self.frame_stats_2 = QtWidgets.QFrame(self.data_tab_widget_1)
        self.frame_stats_2.setGeometry(QtCore.QRect(230, 10, 201, 80))
        self.frame_stats_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_stats_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_stats_2.setObjectName("frame_stats_2")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.frame_stats_2)
        self.textBrowser_2.setGeometry(QtCore.QRect(0, 0, 201, 81))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.frame_stats_3 = QtWidgets.QFrame(self.data_tab_widget_1)
        self.frame_stats_3.setGeometry(QtCore.QRect(440, 10, 201, 80))
        self.frame_stats_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_stats_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_stats_3.setObjectName("frame_stats_3")
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.frame_stats_3)
        self.textBrowser_3.setGeometry(QtCore.QRect(0, 0, 201, 81))
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.request_data_button = QtWidgets.QPushButton(self.data_tab_widget_1)
        self.request_data_button.setGeometry(QtCore.QRect(650, 40, 91, 24))
        self.request_data_button.setObjectName("request_data_button")
        self.request_data_combobox = QtWidgets.QComboBox(self.data_tab_widget_1)
        self.request_data_combobox.setGeometry(QtCore.QRect(750, 10, 221, 24))
        self.request_data_combobox.setEditable(True)
        self.request_data_combobox.setObjectName("request_data_combobox")
        self.data_request_text = QtWidgets.QTextEdit(self.data_tab_widget_1)
        self.data_request_text.setGeometry(QtCore.QRect(750, 40, 221, 21))
        self.data_request_text.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.data_request_text.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.data_request_text.setObjectName("data_request_text")
        self.main_data_widget.addTab(self.data_tab_widget_1, "")
        self.community_request_tab = QtWidgets.QWidget()
        self.community_request_tab.setObjectName("community_request_tab")
        self.label = QtWidgets.QLabel(self.community_request_tab)
        self.label.setGeometry(QtCore.QRect(360, 20, 241, 51))
        font = QtGui.QFont()
        font.setFamily("HACKED")
        font.setPointSize(10)
        font.setKerning(False)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.main_data_widget.addTab(self.community_request_tab, "")
        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        self.widget_2.setGeometry(QtCore.QRect(20, 390, 1001, 210))
        self.widget_2.setStyleSheet("")
        self.widget_2.setObjectName("widget_2")
        self.tableWidget = QtWidgets.QTableWidget(self.widget_2)
        self.tableWidget.setGeometry(QtCore.QRect(9, 9, 991, 192))
        self.tableWidget.setStyleSheet("")
        self.tableWidget.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.tableWidget.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.tableWidget.setDragEnabled(True)
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setGridStyle(QtCore.Qt.SolidLine)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(7)
        self.tableWidget.setRowCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(0, 0, item)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.verticalHeader().setCascadingSectionResizes(False)
        self.tableWidget.verticalHeader().setSortIndicatorShown(True)
        self.tableWidget.verticalHeader().setStretchLastSection(True)
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(20, 160, 991, 210))
        self.stackedWidget.setStyleSheet("")
        self.stackedWidget.setObjectName("stackedWidget")
        self.domain_tree_page_1 = QtWidgets.QWidget()
        self.domain_tree_page_1.setObjectName("domain_tree_page_1")
        self.domain_tree_widget = QtWidgets.QTreeWidget(self.domain_tree_page_1)
        self.domain_tree_widget.setGeometry(QtCore.QRect(9, 9, 981, 192))
        self.domain_tree_widget.setAlternatingRowColors(True)
        self.domain_tree_widget.setObjectName("domain_tree_widget")
        item_0 = QtWidgets.QTreeWidgetItem(self.domain_tree_widget)
        font = QtGui.QFont()
        font.setBold(True)
        item_0.setFont(0, font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/domain.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        item_0.setIcon(0, icon)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        font = QtGui.QFont()
        font.setItalic(True)
        item_1.setFont(0, font)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/sub_domain.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        item_1.setIcon(0, icon1)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        font = QtGui.QFont()
        font.setUnderline(True)
        item_1.setFont(0, font)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons/cookies_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        item_1.setIcon(0, icon2)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        brush = QtGui.QBrush(QtGui.QColor(121, 0, 0))
        brush.setStyle(QtCore.Qt.NoBrush)
        item_2.setBackground(0, brush)
        item_3 = QtWidgets.QTreeWidgetItem(item_2)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        self.stackedWidget.addWidget(self.domain_tree_page_1)
        self.domain_tree_widget_2 = QtWidgets.QWidget()
        self.domain_tree_widget_2.setObjectName("domain_tree_widget_2")
        self.stackedWidget.addWidget(self.domain_tree_widget_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1040, 21))
        self.menubar.setObjectName("menubar")
        self.menuMenu = QtWidgets.QMenu(self.menubar)
        self.menuMenu.setObjectName("menuMenu")
        self.menuCommunity_Stats = QtWidgets.QMenu(self.menubar)
        self.menuCommunity_Stats.setObjectName("menuCommunity_Stats")
        self.menuGroups_Channels = QtWidgets.QMenu(self.menubar)
        self.menuGroups_Channels.setObjectName("menuGroups_Channels")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuMenu.menuAction())
        self.menubar.addAction(self.menuCommunity_Stats.menuAction())
        self.menubar.addAction(self.menuGroups_Channels.menuAction())

        self.retranslateUi(MainWindow)
        self.main_data_widget.setCurrentIndex(0)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.grab_data_button.setText(_translate("MainWindow", "Grab Data"))
        self.toolButton.setText(_translate("MainWindow", "..."))
        self.textBrowser.setPlaceholderText(_translate("MainWindow", "Domains In Database                                                        Cookies In Database                                                  Sub Domains In Database"))
        self.textBrowser_2.setPlaceholderText(_translate("MainWindow", "                  Your Request Data                      Domains:                                            Cookies:                                                             Subdomains:"))
        self.textBrowser_3.setPlaceholderText(_translate("MainWindow", "            Community  Stats"))
        self.request_data_button.setText(_translate("MainWindow", "Request Data"))
        self.main_data_widget.setTabText(self.main_data_widget.indexOf(self.data_tab_widget_1), _translate("MainWindow", "Data Tab 1"))
        self.label.setText(_translate("MainWindow", "Comming Soon"))
        self.main_data_widget.setTabText(self.main_data_widget.indexOf(self.community_request_tab), _translate("MainWindow", "Community Request Tab"))
        self.tableWidget.setSortingEnabled(True)
        item = self.tableWidget.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "Domain"))
        item = self.tableWidget.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "Domain 2"))
        item = self.tableWidget.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "Domain 3"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "URL  "))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Cookie_Name"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Cookie_ID   "))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Cookie Description"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Duration   "))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Type"))
        __sortingEnabled = self.tableWidget.isSortingEnabled()
        self.tableWidget.setSortingEnabled(False)
        self.tableWidget.setSortingEnabled(__sortingEnabled)
        self.domain_tree_widget.headerItem().setText(0, _translate("MainWindow", "1"))
        self.domain_tree_widget.headerItem().setText(1, _translate("MainWindow", "2"))
        self.domain_tree_widget.headerItem().setText(2, _translate("MainWindow", "3"))
        self.domain_tree_widget.headerItem().setText(3, _translate("MainWindow", "4"))
        self.domain_tree_widget.headerItem().setText(4, _translate("MainWindow", "5"))
        self.domain_tree_widget.headerItem().setText(5, _translate("MainWindow", "6"))
        self.domain_tree_widget.headerItem().setText(6, _translate("MainWindow", "7"))
        self.domain_tree_widget.headerItem().setText(7, _translate("MainWindow", "8"))
        self.domain_tree_widget.headerItem().setText(8, _translate("MainWindow", "9"))
        self.domain_tree_widget.headerItem().setText(9, _translate("MainWindow", "10"))
        __sortingEnabled = self.domain_tree_widget.isSortingEnabled()
        self.domain_tree_widget.setSortingEnabled(False)
        self.domain_tree_widget.topLevelItem(0).setText(0, _translate("MainWindow", "URLs"))
        self.domain_tree_widget.topLevelItem(0).setText(1, _translate("MainWindow", "URLs"))
        self.domain_tree_widget.topLevelItem(0).setText(2, _translate("MainWindow", "URLs"))
        self.domain_tree_widget.topLevelItem(0).setText(3, _translate("MainWindow", "URLs"))
        self.domain_tree_widget.topLevelItem(0).setText(4, _translate("MainWindow", "URLs"))
        self.domain_tree_widget.topLevelItem(0).setText(5, _translate("MainWindow", "URLs"))
        self.domain_tree_widget.topLevelItem(0).setText(6, _translate("MainWindow", "URLs"))
        self.domain_tree_widget.topLevelItem(0).setText(7, _translate("MainWindow", "URLs"))
        self.domain_tree_widget.topLevelItem(0).setText(8, _translate("MainWindow", "URLs"))
        self.domain_tree_widget.topLevelItem(0).setText(9, _translate("MainWindow", "URLs"))
        self.domain_tree_widget.topLevelItem(0).child(0).setText(0, _translate("MainWindow", "Domain"))
        self.domain_tree_widget.topLevelItem(0).child(0).setText(1, _translate("MainWindow", "Domain"))
        self.domain_tree_widget.topLevelItem(0).child(0).setText(2, _translate("MainWindow", "Domain"))
        self.domain_tree_widget.topLevelItem(0).child(0).setText(3, _translate("MainWindow", "Domain"))
        self.domain_tree_widget.topLevelItem(0).child(0).setText(4, _translate("MainWindow", "Domain"))
        self.domain_tree_widget.topLevelItem(0).child(0).setText(5, _translate("MainWindow", "Domain"))
        self.domain_tree_widget.topLevelItem(0).child(0).setText(6, _translate("MainWindow", "Domain"))
        self.domain_tree_widget.topLevelItem(0).child(0).setText(7, _translate("MainWindow", "Domain"))
        self.domain_tree_widget.topLevelItem(0).child(0).setText(8, _translate("MainWindow", "Domain"))
        self.domain_tree_widget.topLevelItem(0).child(0).setText(9, _translate("MainWindow", "Domain"))
        self.domain_tree_widget.topLevelItem(0).child(1).setText(0, _translate("MainWindow", "cookie_1"))
        self.domain_tree_widget.topLevelItem(0).child(1).setText(1, _translate("MainWindow", "cookie_1"))
        self.domain_tree_widget.topLevelItem(0).child(1).setText(2, _translate("MainWindow", "cookie_1"))
        self.domain_tree_widget.topLevelItem(0).child(1).setText(3, _translate("MainWindow", "cookie_1"))
        self.domain_tree_widget.topLevelItem(0).child(1).setText(4, _translate("MainWindow", "cookie_1"))
        self.domain_tree_widget.topLevelItem(0).child(1).setText(5, _translate("MainWindow", "cookie_1"))
        self.domain_tree_widget.topLevelItem(0).child(1).setText(6, _translate("MainWindow", "cookie_1"))
        self.domain_tree_widget.topLevelItem(0).child(1).setText(7, _translate("MainWindow", "cookie_1"))
        self.domain_tree_widget.topLevelItem(0).child(1).setText(8, _translate("MainWindow", "cookie_1"))
        self.domain_tree_widget.topLevelItem(0).child(1).setText(9, _translate("MainWindow", "cookie_1"))
        self.domain_tree_widget.topLevelItem(0).child(1).child(0).setText(0, _translate("MainWindow", "Value"))
        self.domain_tree_widget.topLevelItem(0).child(1).child(0).child(0).setText(0, _translate("MainWindow", "Description"))
        self.domain_tree_widget.topLevelItem(0).child(2).setText(0, _translate("MainWindow", "HTTP Data"))
        self.domain_tree_widget.topLevelItem(0).child(2).child(0).setText(0, _translate("MainWindow", "Headers"))
        self.domain_tree_widget.topLevelItem(0).child(2).child(1).setText(0, _translate("MainWindow", "Security Headers"))
        self.domain_tree_widget.topLevelItem(0).child(2).child(2).setText(0, _translate("MainWindow", "Parsing Data"))
        self.domain_tree_widget.setSortingEnabled(__sortingEnabled)
        self.menuMenu.setTitle(_translate("MainWindow", "Menu"))
        self.menuCommunity_Stats.setTitle(_translate("MainWindow", "Community Stats"))
        self.menuGroups_Channels.setTitle(_translate("MainWindow", "Groups & Channels"))


        __sortingEnabled = self.tableWidget.isSortingEnabled()
        self.tableWidget.setSortingEnabled(False)
        self.tableWidget.setSortingEnabled(__sortingEnabled)
        self.grab_data_button.clicked.connect(self.grabData)
        self.request_data_button.clicked.connect(self.handle_data_request)



    def populateDomainTreeWidget(self):
        # Connect to the database
        conn = sqlite3.connect('your_database.db')
        cursor = conn.cursor()

        # Retrieve the data from the cookies table
        cursor.execute("SELECT * FROM cookies")
        results = cursor.fetchall()

        # Clear the domain_tree_widget
        self.domain_tree_widget.clear()

        # Set the text in the textBrowser
        text = ""
        for result in results:
            domain = result[1]
            url = result[2]
            cookie_name = result[3]
            cookie_id = result[4]
            description = result[5]
            duration = result[6]
            cookie_type = result[7]
            storage_type = result[8]

            text += f"Domain: {domain}\n"
            text += f"URL: {url}\n"
            text += f"Cookie Name: {cookie_name}\n"
            text += f"Cookie ID: {cookie_id}\n"
            text += f"Description: {description}\n"
            text += f"Duration: {duration}\n"
            text += f"Type: {cookie_type}\n"
            text += f"Storage Type: {storage_type}\n\n"

        self.textBrowser.setPlainText(text)

        # Close the database connection
        conn.close()

    def populateTableWidget(self):
        # Connect to the database
        conn = sqlite3.connect('your_database.db')
        cursor = conn.cursor()
    
        # Retrieve the data from the cookies table
        cursor.execute("SELECT domain, URL, Cookie_name, cookie_ID, description FROM cookies")
        results = cursor.fetchall()
    
        # Set the table headers
        headers = ["Domain", "URL", "Cookie Name", "Cookie ID", "Cookie Description"]
        self.tableWidget.setColumnCount(len(headers))
        self.tableWidget.setHorizontalHeaderLabels(headers)
    
        # Populate the tableWidget with the data
        self.tableWidget.setRowCount(len(results))
        for row, result in enumerate(results):
            for col, value in enumerate(result):
                item = QtWidgets.QTableWidgetItem(str(value))
                self.tableWidget.setItem(row, col, item)
    
        # Close the database connection
        conn.close()



    def display_stats(self):
        conn = sqlite3.connect('cookie_data.db')
        cursor = conn.cursor()

        # Retrieve the statistics data from the database
        cursor.execute("SELECT COUNT(*), MIN(column), MAX(column) FROM cookies")
        result = cursor.fetchone()
        count = result[0]
        min_value = result[1]
        max_value = result[2]

        # Update the labels in the frames with the statistics data
        self.frame_stats_1.setText(f"Count: {count}")
        self.label_stats_2.setText(f"Min Value: {min_value}")
        self.label_stats_3.setText(f"Max Value: {max_value}")

        # Close the database connection
        conn.close()


    def grabData(self):
        # Connect to the database
        conn = sqlite3.connect('cookie_data.db')
        cursor = conn.cursor()
        
        # Create the cookies table if it doesn't exist
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS cookies (
                request_datetime TEXT,
                domain TEXT,
                URL TEXT,
                Cookie_name TEXT,
                cookie_ID TEXT,
                description TEXT,
                duration TEXT,
                type TEXT,
                storage_type TEXT
            )
        """)
        
        # Commit the changes and close the connection
        conn.commit()
        # Retrieve the data from the database
        cursor.execute("SELECT * FROM cookies")
        results = cursor.fetchall()

        # Retrieve the count of unique values for domains
        cursor.execute("SELECT COUNT(DISTINCT domain) FROM cookies")
        domain_count = cursor.fetchone()[0]

        # Retrieve the count of unique values for cookie names
        cursor.execute("SELECT COUNT(DISTINCT Cookie_name) FROM cookies")
        cookie_name_count = cursor.fetchone()[0]

        # Retrieve the count of unique values for cookie IDs
        cursor.execute("SELECT COUNT(DISTINCT cookie_ID) FROM cookies")
        cookie_id_count = cursor.fetchone()[0]

        # Retrieve the count of unique values for cookie types
        cursor.execute("SELECT COUNT(DISTINCT type) FROM cookies")
        cookie_type_count = cursor.fetchone()[0]

        # Display the counts in the textBrowser
        self.textBrowser.setPlainText("Data Numbers:\n\n")
        self.textBrowser.append(f"Domains: {domain_count}")
        self.textBrowser.append(f"Cookie Names: {cookie_name_count}")
        self.textBrowser.append(f"Cookie ID: {cookie_id_count}")
        self.textBrowser.append(f"Cookie Types: {cookie_type_count}")

        # Close the database connection
        conn.close()


        # Auto-resize the columns to fit the content
        self.tableWidget.resizeColumnsToContents()

        # Populate the request_data_combobox with unique URLs
        urls = set(result[1] for result in results)
        self.request_data_combobox.clear()
        self.request_data_combobox.addItems(urls)


    def handle_data_request(self):
        # Get the selected URL from the data_request_text field
        selected_url = self.data_request_text.toPlainText()
        
        # Connect to the database
        conn = sqlite3.connect('cookie_data.db')
        cursor = conn.cursor()
        
        # Retrieve the results for the selected URL from the database
        cursor.execute("SELECT * FROM cookies WHERE URL = ? LIMIT 10", (selected_url,))
        results = cursor.fetchall()
        
        # Clear the domain_tree_widget
        self.domain_tree_widget.clear()
        
        # Populate the domain_tree_widget with the data
        for i, result in enumerate(results):
            url = result[2]
            domain_item = QtWidgets.QTreeWidgetItem(self.domain_tree_widget, [f"URL {i+1}", url])
            
            # Get the favicon URL
            favicon_url = get_favicon(url)
            if favicon_url:
                favicon_item = QtWidgets.QTreeWidgetItem(domain_item, ["Favicon URL", favicon_url])
        
            for j in range(1, 6):
                cookie_name = result[j+2]
                cookie_item = QtWidgets.QTreeWidgetItem(domain_item, [cookie_name])
        
                description = result[j+3]
                description_item = QtWidgets.QTreeWidgetItem(cookie_item, ["Description", description])
        
                duration = result[j+4]
                duration_item = QtWidgets.QTreeWidgetItem(cookie_item, ["Duration", duration])
        
                cookie_type = result[j+5]
                type_item = QtWidgets.QTreeWidgetItem(cookie_item, ["Type", cookie_type])
        
        # Close the database connection
        conn.close()
    
    def get_favicon(url):
        try:
            response = requests.get(url)
            soup = BeautifulSoup(response.text, 'html.parser')
            favicon_link = soup.find('link', rel='icon')
            if favicon_link:
                favicon_url = favicon_link['href']
                if not favicon_url.startswith('http'):
                    parsed_url = urlparse(url)
                    favicon_url = f"{parsed_url.scheme}://{parsed_url.netloc}{favicon_url}"
                return favicon_url
        except requests.exceptions.RequestException:
            return None
      

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
