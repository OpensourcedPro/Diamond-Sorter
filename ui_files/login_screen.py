# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'loginUi3.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QAxContainer
import requests
import subprocess

import binascii  # hex encoding
import hashlib
import json as jsond  # json
import os
import platform  # check platform
import subprocess  # needed for mac device
import sys
import time  # sleep before exit
from datetime import datetime
from time import sleep
from uuid import uuid4  # gen random guid
#import keyauth
#from keyauth import *
import hashlib
from hashlib import *
from PyQt5 import QtWidgets, QtGui, QtCore, QtWebEngineWidgets

from keyauth import keyauth


getchecksum = lambda: hashlib.sha256(open(sys.argv[0], 'rb').read()).hexdigest()

name = "DiamondSorter"
ownerid = "VwOq0EhmEw"
secret = "795e63c4dd27cbb04b9af01befb8eae95625e51115356cbbd767196900409066"
version = "1.0"
hash_to_check = getchecksum()
keyauthapp = keyauth.api(name =name,
                        ownerid =ownerid,
                        secret =secret,
                        version =version,
                        hash_to_check=hash_to_check)
print(keyauthapp)

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1027, 610)
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setGeometry(QtCore.QRect(-60, -80, 991, 681))
        self.widget.setStyleSheet("QPushButton#pushButton{\n"
"    background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(11, 131, 120, 219), stop:1 rgba(85, 98, 112, 226));\n"
"    color:rgba(255, 255, 255, 210);\n"
"    border-radius:5px;\n"
"}\n"
"\n"
"QPushButton#pushButton:hover{\n"
"    background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(150, 123, 111, 219), stop:1 rgba(85, 81, 84, 226));\n"
"}\n"
"\n"
"QPushButton#pushButton:pressed{\n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    background-color:rgba(150, 123, 111, 255);\n"
"}\n"
"\n"
"QPushButton#pushButton_2, #pushButton_3, #pushButton_4, #pushButton_5{\n"
"    background-color: rgba(0, 0, 0, 0);\n"
"    color:rgba(85, 98, 112, 255);\n"
"}\n"
"\n"
"QPushButton#pushButton_2:hover, #pushButton_3:hover, #pushButton_4:hover, #pushButton_5:hover{\n"
"    color: rgba(131, 96, 53, 255);\n"
"}\n"
"\n"
"QPushButton#pushButton_2:pressed, #pushButton_3:pressed, #pushButton_4:pressed, #pushButton_5:pressed{\n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    color:rgba(91, 88, 53, 255);\n"
"}\n"
"\n"
"")
        self.widget.setObjectName("widget")
        self.backdrop_holder_label = QtWidgets.QLabel(self.widget)
        self.backdrop_holder_label.setGeometry(QtCore.QRect(100, 210, 531, 481))
        self.backdrop_holder_label.setStyleSheet("border-image: url(:/images/background.gif);\n"
"border-top-left-radius: 50px;")
        self.backdrop_holder_label.setText("")
        self.backdrop_holder_label.setObjectName("backdrop_holder_label")
        self.backdrop_holder = QtWidgets.QLabel(self.widget)
        self.backdrop_holder.setGeometry(QtCore.QRect(100, 70, 531, 611))
        self.backdrop_holder.setStyleSheet("background-color:rgba(0, 0, 0, 80);\n"
"border-top-left-radius: 50px;")
        self.backdrop_holder.setText("")
        self.backdrop_holder.setObjectName("backdrop_holder")
        self.program_backdrop = QtWidgets.QLabel(self.widget)
        self.program_backdrop.setGeometry(QtCore.QRect(110, 80, 521, 130))
        self.program_backdrop.setStyleSheet("background-color:rgba(0, 0, 0, 75);")
        self.program_backdrop.setText("")
        self.program_backdrop.setObjectName("program_backdrop")
        self.program_title = QtWidgets.QLabel(self.widget)
        self.program_title.setGeometry(QtCore.QRect(380, 90, 231, 81))
        font = QtGui.QFont()
        font.setPointSize(22)
        font.setBold(True)
        self.program_title.setFont(font)
        self.program_title.setStyleSheet("color:rgba(255, 255, 255, 200);")
        self.program_title.setObjectName("program_title")
        self.program_description = QtWidgets.QLabel(self.widget)
        self.program_description.setGeometry(QtCore.QRect(119, 140, 241, 50))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.program_description.setFont(font)
        self.program_description.setStyleSheet("color:rgba(255, 255, 255, 170);")
        self.program_description.setObjectName("program_description")
        self.system_updates = QtWidgets.QFrame(self.widget)
        self.system_updates.setGeometry(QtCore.QRect(110, 230, 511, 381))
        self.system_updates.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.system_updates.setFrameShadow(QtWidgets.QFrame.Raised)
        self.system_updates.setObjectName("system_updates")
        self.program_stats_frame = QtWidgets.QFrame(self.widget)
        self.program_stats_frame.setGeometry(QtCore.QRect(110, 620, 511, 51))
        self.program_stats_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.program_stats_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.program_stats_frame.setObjectName("program_stats_frame")
        self.login_tab_widget = QtWidgets.QTabWidget(Form)
        self.login_tab_widget.setGeometry(QtCore.QRect(570, 0, 451, 611))
        self.login_tab_widget.setTabPosition(QtWidgets.QTabWidget.East)
        self.login_tab_widget.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.login_tab_widget.setTabsClosable(True)
        self.login_tab_widget.setTabBarAutoHide(True)
        self.login_tab_widget.setObjectName("login_tab_widget")
        self.login_tab = QtWidgets.QWidget()
        self.login_tab.setObjectName("login_tab")
        self.login_backdrop = QtWidgets.QLabel(self.login_tab)
        self.login_backdrop.setGeometry(QtCore.QRect(-30, 0, 441, 591))
        self.login_backdrop.setStyleSheet("background-color:rgba(255, 255, 255, 255);\n"
"border-bottom-right-radius: 50px;")
        self.login_backdrop.setText("")
        self.login_backdrop.setObjectName("login_backdrop")
        self.username_lineedit = QtWidgets.QLineEdit(self.login_tab)
        self.username_lineedit.setGeometry(QtCore.QRect(95, 180, 190, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.username_lineedit.setFont(font)
        self.username_lineedit.setStyleSheet("background-color:rgba(0, 0, 0, 0);\n"
"border:none;\n"
"border-bottom:2px solid rgba(46, 82, 101, 200);\n"
"color:rgba(0, 0, 0, 240);\n"
"padding-bottom:7px;")
        self.username_lineedit.setObjectName("username_lineedit")
        self.password_lineedit = QtWidgets.QLineEdit(self.login_tab)
        self.password_lineedit.setGeometry(QtCore.QRect(95, 245, 190, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.password_lineedit.setFont(font)
        self.password_lineedit.setStyleSheet("background-color:rgba(0, 0, 0, 0);\n"
"border:none;\n"
"border-bottom:2px solid rgba(46, 82, 101, 200);\n"
"color:rgba(0, 0, 0, 240);\n"
"padding-bottom:7px;")
        self.password_lineedit.setEchoMode(QtWidgets.QLineEdit.Password)
        self.password_lineedit.setObjectName("password_lineedit")
        self.i_label_button = QtWidgets.QPushButton(self.login_tab)
        self.i_label_button.setGeometry(QtCore.QRect(264, 500, 30, 30))
        self.i_label_button.setMaximumSize(QtCore.QSize(30, 30))
        palette = QtGui.QPalette()
        self.i_label_button.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Social Media Circled")
        font.setPointSize(15)
        self.i_label_button.setFont(font)
        self.i_label_button.setMouseTracking(True)
        self.i_label_button.setCheckable(False)
        self.i_label_button.setObjectName("i_label_button")
        self.l_label_button = QtWidgets.QPushButton(self.login_tab)
        self.l_label_button.setGeometry(QtCore.QRect(142, 500, 30, 30))
        self.l_label_button.setMaximumSize(QtCore.QSize(30, 30))
        font = QtGui.QFont()
        font.setFamily("Social Media Circled")
        font.setPointSize(15)
        self.l_label_button.setFont(font)
        self.l_label_button.setCheckable(False)
        self.l_label_button.setChecked(False)
        self.l_label_button.setObjectName("l_label_button")
        self.p_label_button = QtWidgets.QPushButton(self.login_tab)
        self.p_label_button.setGeometry(QtCore.QRect(81, 500, 30, 30))
        self.p_label_button.setMaximumSize(QtCore.QSize(30, 30))
        font = QtGui.QFont()
        font.setFamily("Social Media Circled")
        font.setPointSize(15)
        self.p_label_button.setFont(font)
        self.p_label_button.setObjectName("p_label_button")
        self.login_button = QtWidgets.QPushButton(self.login_tab)
        self.login_button.setGeometry(QtCore.QRect(95, 325, 190, 40))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.login_button.setFont(font)
        self.login_button.setObjectName("login_button")
        self.login_label = QtWidgets.QLabel(self.login_tab)
        self.login_label.setGeometry(QtCore.QRect(140, 110, 100, 40))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.login_label.setFont(font)
        self.login_label.setStyleSheet("color:rgba(0, 0, 0, 200);")
        self.login_label.setObjectName("login_label")
        self.x_label_button = QtWidgets.QPushButton(self.login_tab)
        self.x_label_button.setGeometry(QtCore.QRect(20, 500, 30, 30))
        self.x_label_button.setMaximumSize(QtCore.QSize(30, 30))
        font = QtGui.QFont()
        font.setFamily("Social Media Circled")
        font.setPointSize(15)
        self.x_label_button.setFont(font)
        self.x_label_button.setObjectName("x_label_button")
        self.o_label_button = QtWidgets.QPushButton(self.login_tab)
        self.o_label_button.setGeometry(QtCore.QRect(203, 500, 30, 30))
        self.o_label_button.setMaximumSize(QtCore.QSize(30, 30))
        font = QtGui.QFont()
        font.setFamily("Social Media Circled")
        font.setPointSize(15)
        self.o_label_button.setFont(font)
        self.o_label_button.setObjectName("o_label_button")
        self.Forgot_username_label = QtWidgets.QLabel(self.login_tab)
        self.Forgot_username_label.setGeometry(QtCore.QRect(101, 375, 201, 16))
        self.Forgot_username_label.setStyleSheet("color:rgba(0, 0, 0, 210);")
        self.Forgot_username_label.setObjectName("Forgot_username_label")
        self.Forgot_username_label.setOpenExternalLinks(True)  # Enable opening links in a web browser
        self.Forgot_username_label.linkActivated.connect(self.open_forgot_password_link)
        name = ownerid = secret = version = hash_to_check = ""

        sessionid = enckey = ""
        initialized = True
    
        self.name = name

        self.ownerid = ownerid

        self.secret = secret

        self.version = version
        self.hash_to_check = hash_to_check
        self.t_label_button = QtWidgets.QPushButton(self.login_tab)
        self.t_label_button.setGeometry(QtCore.QRect(325, 500, 30, 30))
        self.t_label_button.setMaximumSize(QtCore.QSize(30, 30))
        palette = QtGui.QPalette()
        self.t_label_button.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Social Media Circled")
        font.setPointSize(15)
        self.t_label_button.setFont(font)
        self.t_label_button.setMouseTracking(True)
        self.t_label_button.setCheckable(False)
        self.t_label_button.setObjectName("t_label_button")
        self.want_to_register_button = QtWidgets.QLabel(self.login_tab)
        self.want_to_register_button.setGeometry(QtCore.QRect(140, 400, 101, 16))
        self.want_to_register_button.setStyleSheet("color:rgba(0, 0, 0, 210);")
        self.want_to_register_button.setObjectName("want_to_register_button")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../../../OneDrive/Documents/New Structure/icons/exit-to-app.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.login_tab_widget.addTab(self.login_tab, icon, "")
        self.information_tab2 = QtWidgets.QWidget()
        self.information_tab2.setObjectName("information_tab2")
        self.tab_2_widget_holder = QAxContainer.QAxWidget(self.information_tab2)
        self.tab_2_widget_holder.setProperty("geometry", QtCore.QRect(10, 170, 391, 391))
        self.tab_2_widget_holder.setObjectName("tab_2_widget_holder")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../../../../OneDrive/Documents/New Structure/icons/go-back.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.login_tab_widget.addTab(self.information_tab2, icon1, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.login_tab_widget.addTab(self.tab_2, "")
        self.want_to_register_label = QtWidgets.QLabel(self.login_tab)
        self.want_to_register_label.setGeometry(QtCore.QRect(140, 400, 101, 16))
        self.want_to_register_label.setStyleSheet("color:rgba(0, 0, 0, 210);")
        self.want_to_register_label.setObjectName("want_to_register_label")
        self.want_to_register_label.linkActivated.connect(self.open_register_dialog)
        
        self.retranslateUi(Form)
        self.login_tab_widget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.program_title.setText(_translate("Form", "Diamond💎\n"
"               Sorter"))
        self.program_description.setText(_translate("Form", "Hi,\n"
"Welcome to Diamond Sorter channel.\n"
"Don\'t forget to subscribe."))
        self.username_lineedit.setPlaceholderText(_translate("Form", "  User Name"))
        self.password_lineedit.setPlaceholderText(_translate("Form", "  Password"))
        self.i_label_button.setText(_translate("Form", "I"))
        self.l_label_button.setText(_translate("Form", "L"))
        self.p_label_button.setText(_translate("Form", "P"))
        self.login_button.setText(_translate("Form", "L o g  I n"))
        self.login_label.setText(_translate("Form", "Log In"))
        self.x_label_button.setText(_translate("Form", "X"))
        self.o_label_button.setText(_translate("Form", "O"))
        self.Forgot_username_label.setText(_translate("Form", "<a href=https://t.me/Cash_Out_Gang1337>Forgot your User Name or password?</a>"))
        self.t_label_button.setText(_translate("Form", "T"))
        self.want_to_register_label.setText(_translate("Form", "<a href=\"#\">Want to Register?</a>"))
        self.login_tab_widget.setTabText(self.login_tab_widget.indexOf(self.login_tab), _translate("Form", "Login"))
        self.login_tab_widget.setTabText(self.login_tab_widget.indexOf(self.information_tab2), _translate("Form", "Information"))
        self.login_tab_widget.setTabText(self.login_tab_widget.indexOf(self.tab_2), _translate("Form", "Project Information + Updates"))
        self.login_button.clicked.connect(self.handle_login)  # Connect the login_button clicked signal to handle_login slot
    def getchecksum():
        path = os.path.basename(__file__)
        if not os.path.exists(path):
            path = path[:-2] + "exe"
        md5_hash = hashlib.md5()
        a_file = open(path, "rb")
        content = a_file.read()
        md5_hash.update(content)
        digest = md5_hash.hexdigest()
        return digest
        
    def handle_login(self):
        username = self.login_tab_widget.findChild(QtWidgets.QLineEdit, "username_lineedit").text()
        password = self.password_lineedit.text()
        
        # Check if username or password is empty
        if not username or not password:
            error_message = "Please enter both a username and password."
            QtWidgets.QMessageBox.warning(self.login_tab, "Login Error", error_message, QtWidgets.QMessageBox.Ok)
            return
    
        hwid = subprocess.check_output('wmic csproduct get uuid').decode().split('\n')[1].strip()
        
        login = keyauthapp.login(username, password, hwid)

    def open_forgot_password_link(self, link):
        webbrowser.open(link)  # Open the provided link in a web browser

    def register_activation_key():
        # Display three choices for registering an activation key
        reply = QtWidgets.QMessageBox.question(self.login_tab, "Register Activation Key", "Choose an option to register an activation key:",
                                            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Cancel)
        if reply == QtWidgets.QMessageBox.Yes:
            # Buy from Store
            buy_from_store()
        elif reply == QtWidgets.QMessageBox.No:
            # Buy from Developer
            buy_from_developer()
        elif reply == QtWidgets.QMessageBox.Cancel:
            # Buy from KeyAuth
            buy_from_keyauth()
                    
                
    def open_register_dialog(self):
        license_key, ok = QtWidgets.QInputDialog.getText(Form, "Register", "Enter License Key:")
        if ok:
            response = self.verify_license_key(license_key)
            if response["status"] == "success":
                username, ok1 = QtWidgets.QInputDialog.getText(Form, "Register", "Enter Username:")
                password, ok2 = QtWidgets.QInputDialog.getText(Form, "Register", "Enter Password:", QtWidgets.QLineEdit.Password)
                if ok1 and ok2:
                    print("License Key:", license_key)
                    print("Username:", username)
                    print("Password:", password)
            else:
                QtWidgets.QMessageBox.warning(Form, "Invalid License", "The license key is not valid. Please try again.", QtWidgets.QMessageBox.Ok)
    
    def verify_license_key(self, key, hwid=None):
        self.checkinit()
        if hwid is None:
            hwid = others.get_hwid()
    
        response = self.api.verify_license(key, hwid)
        return response      
                
    def checkinit(self):
        if not self.initialized:
            print("Initialize first, in order to use the functions")
            time.sleep(3)
            os._exit(1)
                
                
                
    def buy_from_store():
        # Implement the logic to buy an activation key from the store
        pass
    
    def buy_from_developer():
        # Implement the logic to buy an activation key from the developer
        pass
    
    def buy_from_keyauth():
        # Implement the logic to buy an activation key from KeyAuth
        pass


    def open_signup_screen(self):
        # Open the signup screen with license key activation
        signup_screen = SignupScreen()
        signup_screen.exec_()


    sessionid = enckey = ""
    initialized = True

    def init(self):
        if self.sessionid != "":
            print("You've already initialized!")
            time.sleep(3)
            os._exit(1)

        sent_key = str(uuid4())[:16]
        
        self.enckey = sent_key + "-" + self.secret
        
        post_data = {
            "type": "init",
            "ver": self.version,
            "hash": self.hash_to_check,
            "enckey": sent_key,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        if response == "KeyAuth_Invalid":
            print("The application doesn't exist")
            time.sleep(3)
            os._exit(1)

        json = jsond.loads(response)

        if json["message"] == "invalidver":
            if json["download"] != "":
                print("New Version Available")
                download_link = json["download"]
                os.system(f"start {download_link}")
                time.sleep(3)
                os._exit(1)
            else:
                print("Invalid Version, Contact owner to add download link to latest app version")
                time.sleep(3)
                os._exit(1)

        if not json["success"]:
            print(json["message"])
            time.sleep(3)
            os._exit(1)

        self.sessionid = json["sessionid"]
        self.initialized = True
        
        if json["newSession"]:
            time.sleep(0.1)


    def register(self, user, password, license, hwid=None):
        self.checkinit()
        if hwid is None:
            hwid = others.get_hwid()

        post_data = {
            "type": "register",
            "username": user,
            "pass": password,
            "key": license,
            "hwid": hwid,
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            print(json["message"])
            self.__load_user_data(json["info"])
        else:
            print(json["message"])
            time.sleep(3)
            os._exit(1)

    def upgrade(self, user, license):
        self.checkinit()

        post_data = {
            "type": "upgrade",
            "username": user,
            "key": license,
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            print(json["message"])
            print("Please restart program and login")
            time.sleep(3)
            os._exit(1)
        else:
            print(json["message"])
            time.sleep(3)
            os._exit(1)

    def login(self, user, password, hwid=None):
        self.checkinit()
        if hwid is None:
            hwid = others.get_hwid()

        post_data = {
            "type": "login",
            "username": user,
            "pass": password,
            "hwid": hwid,
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            self.__load_user_data(json["info"])
            print(json["message"])
        else:
            print(json["message"])
            time.sleep(3)
            os._exit(1)

    def license(self, key, hwid=None):
        self.checkinit()
        if hwid is None:
            hwid = others.get_hwid()

        post_data = {
            "type": "license",
            "key": key,
            "hwid": hwid,
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            self.__load_user_data(json["info"])
            print(json["message"])
        else:
            print(json["message"])
            time.sleep(3)
            os._exit(1)

    def var(self, name):
        self.checkinit()

        post_data = {
            "type": "var",
            "varid": name,
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            return json["message"]
        else:
            print(json["message"])
            time.sleep(3)
            os._exit(1)

    def getvar(self, var_name):
        self.checkinit()

        post_data = {
            "type": "getvar",
            "var": var_name,
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }
        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            return json["response"]
        else:
            print(f"NOTE: This is commonly misunderstood. This is for user variables, not the normal variables.\nUse keyauthapp.var(\"{var_name}\") for normal variables");
            print(json["message"])
            time.sleep(3)
            os._exit(1)

    def setvar(self, var_name, var_data):
        self.checkinit()

        post_data = {
            "type": "setvar",
            "var": var_name,
            "data": var_data,
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }
        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            return True
        else:
            print(json["message"])
            time.sleep(3)
            os._exit(1)

    def ban(self):
        self.checkinit()

        post_data = {
            "type": "ban",
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }
        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            return True
        else:
            print(json["message"])
            time.sleep(3)
            os._exit(1)

    def file(self, fileid):
        self.checkinit()

        post_data = {
            "type": "file",
            "fileid": fileid,
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if not json["success"]:
            print(json["message"])
            time.sleep(3)
            os._exit(1)
        return binascii.unhexlify(json["contents"])

    def webhook(self, webid, param, body = "", conttype = ""):
        self.checkinit()

        post_data = {
            "type": "webhook",
            "webid": webid,
            "params": param,
            "body": body,
            "conttype": conttype,
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            return json["message"]
        else:
            print(json["message"])
            time.sleep(3)
            os._exit(1)

    def check(self):
        self.checkinit()

        post_data = {
            "type": "check",
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }
        response = self.__do_request(post_data)

        json = jsond.loads(response)
        if json["success"]:
            return True
        else:
            return False

    def checkblacklist(self):
        self.checkinit()
        hwid = others.get_hwid()

        post_data = {
            "type": "checkblacklist",
            "hwid": hwid,
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }
        response = self.__do_request(post_data)

        json = jsond.loads(response)
        if json["success"]:
            return True
        else:
            return False

    def log(self, message):
        self.checkinit()

        post_data = {
            "type": "log",
            "pcuser": os.getenv('username'),
            "message": message,
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }

        self.__do_request(post_data)

    def fetchOnline(self):
        self.checkinit()

        post_data = {
            "type": "fetchOnline",
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            if len(json["users"]) == 0:
                return None
            else:
                return json["users"]
        else:
            return None
            
    def fetchStats(self):
        self.checkinit()

        post_data = {
            "type": "fetchStats",
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            self.__load_app_data(json["appinfo"])
            
    def chatGet(self, channel):
        self.checkinit()

        post_data = {
            "type": "chatget",
            "channel": channel,
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            return json["messages"]
        else:
            return None

    def chatSend(self, message, channel):
        self.checkinit()

        post_data = {
            "type": "chatsend",
            "message": message,
            "channel": channel,
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            return True
        else:
            return False

    def checkinit(self):
        if not self.initialized:
            print("Initialize first, in order to use the functions")
            time.sleep(3)
            os._exit(1)

    def changeUsername(self, username):
        self.checkinit()

        post_data = {
            "type": "changeUsername",
            "newUsername": username,
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            print("Successfully changed username")
        else:
            print(json["message"])
            time.sleep(3)
            os._exit(1)  

    def logout(self):
        self.checkinit()

        post_data = {
            "type": "logout",
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            print("Successfully logged out")
            time.sleep(3)
            os._exit(1)
        else:
            print(json["message"])
            time.sleep(3)
            os._exit(1)         
            
    def __do_request(self, post_data):
        try:
            response = requests.post(
                "https://keyauth.win/api/1.2/", data=post_data, timeout=10
            )
            
            key = self.secret if post_data["type"] == "init" else self.enckey
            if post_data["type"] == "log": return response.text
                        
            client_computed = hmac.new(key.encode('utf-8'), response.text.encode('utf-8'), hashlib.sha256).hexdigest()
            
            signature = response.headers["signature"]
            
            if not hmac.compare_digest(client_computed, signature):
                print("Signature checksum failed. Request was tampered with or session ended most likely.")
                print("Response: " + response.text)
                time.sleep(3)
                os._exit(1) 
            
            return response.text
        except requests.exceptions.Timeout:
            print("Request timed out. Server is probably down/slow at the moment")

    class application_data_class:
        numUsers = numKeys = app_ver = customer_panel = onlineUsers = ""

    class user_data_class:
        username = ip = hwid = expires = createdate = lastlogin = subscription = subscriptions = ""

    user_data = user_data_class()
    app_data = application_data_class()

    def __load_app_data(self, data):
        self.app_data.numUsers = data["numUsers"]
        self.app_data.numKeys = data["numKeys"]
        self.app_data.app_ver = data["version"]
        self.app_data.customer_panel = data["customerPanelLink"]
        self.app_data.onlineUsers = data["numOnlineUsers"]

    def __load_user_data(self, data):
        self.user_data.username = data["username"]
        self.user_data.ip = data["ip"]
        self.user_data.hwid = data["hwid"] or "N/A"
        self.user_data.expires = data["subscriptions"][0]["expiry"]
        self.user_data.createdate = data["createdate"]
        self.user_data.lastlogin = data["lastlogin"]
        self.user_data.subscription = data["subscriptions"][0]["subscription"]
        self.user_data.subscriptions = data["subscriptions"]


class others:
    @staticmethod
    def get_hwid():
        if platform.system() == "Linux":
            with open("/etc/machine-id") as f:
                hwid = f.read()
                return hwid
        elif platform.system() == 'Windows':
            winuser = os.getlogin()
            sid = win32security.LookupAccountName(None, winuser)[0]  # You can also use WMIC (better than SID, some users had problems with WMIC)
            hwid = win32security.ConvertSidToStringSid(sid)
            return hwid
            '''
            cmd = subprocess.Popen(
                "wmic useraccount where name='%username%' get sid",
                stdout=subprocess.PIPE,
                shell=True,
            )

            (suppost_sid, error) = cmd.communicate()

            suppost_sid = suppost_sid.split(b"\n")[1].strip()

            return suppost_sid.decode()

            ^^ HOW TO DO IT USING WMIC
            '''
        elif platform.system() == 'Darwin':
            output = subprocess.Popen("ioreg -l | grep IOPlatformSerialNumber", stdout=subprocess.PIPE, shell=True).communicate()[0]
            serial = output.decode().split('=', 1)[1].replace(' ', '')
            hwid = serial[1:-2]
            return hwid


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())